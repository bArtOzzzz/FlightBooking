// <auto-generated />
using System;
using FlightBooking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightBooking.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightBooking.Domain.Entities.AirlineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AirlineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Airlines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fbfb19d-a94a-41f4-ba03-4641a079f658"),
                            AirlineName = "Belavia",
                            Rating = 4.2999999999999998
                        },
                        new
                        {
                            Id = new Guid("098acb74-29c7-46fc-8d62-839a51842205"),
                            AirlineName = "American Airlines",
                            Rating = 4.7000000000000002
                        },
                        new
                        {
                            Id = new Guid("b169abc0-4a87-4152-9187-8dc97d01c68f"),
                            AirlineName = "Airnorth",
                            Rating = 3.8999999999999999
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.AirplaneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaximumSeats")
                        .HasColumnType("int");

                    b.Property<int>("MaximumWeight")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airplanes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4d8814e-bc80-4662-a5ba-c0fbdf717933"),
                            MaximumSeats = 525,
                            MaximumWeight = 46750,
                            ModelName = "ATR EVO"
                        },
                        new
                        {
                            Id = new Guid("5f62643f-c965-4b42-be98-6a9d44a4f736"),
                            MaximumSeats = 320,
                            MaximumWeight = 32400,
                            ModelName = "CRIAC CR929"
                        },
                        new
                        {
                            Id = new Guid("6b5c2f29-8cad-4555-ae40-afa7f38730e7"),
                            MaximumSeats = 180,
                            MaximumWeight = 22600,
                            ModelName = "Comac C919"
                        },
                        new
                        {
                            Id = new Guid("576fbfa1-c520-4080-80a8-6d6e4db8092a"),
                            MaximumSeats = 125,
                            MaximumWeight = 35600,
                            ModelName = "Airbus A220"
                        },
                        new
                        {
                            Id = new Guid("143fea35-ded7-4e4b-8456-070275ebbec9"),
                            MaximumSeats = 150,
                            MaximumWeight = 22600,
                            ModelName = "Comac C919"
                        },
                        new
                        {
                            Id = new Guid("ac0d2a55-4a27-419e-a7d4-4878109f3ec1"),
                            MaximumSeats = 300,
                            MaximumWeight = 31000,
                            ModelName = "Airbus A350"
                        },
                        new
                        {
                            Id = new Guid("03c9e780-31c2-4599-92fa-ff580c13c646"),
                            MaximumSeats = 525,
                            MaximumWeight = 46750,
                            ModelName = "ATR EVO"
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.BoardingPassEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prise")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isExpired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("BoardingPasses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c7f70c2-ec74-4d52-9a44-9576322ad787"),
                            BookingExpireDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = new Guid("908db434-d6f4-43f2-ac9e-fc8bfcf04455"),
                            Prise = 778m,
                            UserId = new Guid("4106bf6d-2306-43a3-8614-e7818fd98f31"),
                            isExpired = false
                        },
                        new
                        {
                            Id = new Guid("790bd9bb-c652-472d-91bd-2cbe1fe922ad"),
                            BookingExpireDate = new DateTime(2023, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = new Guid("c29c4308-90eb-4467-a43e-f6177038591d"),
                            Prise = 1661m,
                            UserId = new Guid("4106bf6d-2306-43a3-8614-e7818fd98f31"),
                            isExpired = false
                        },
                        new
                        {
                            Id = new Guid("a128118e-98d7-45c8-8abb-45715e198636"),
                            BookingExpireDate = new DateTime(2023, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = new Guid("229b7943-0ff5-4a26-8664-ed32b8a6569f"),
                            Prise = 1672m,
                            UserId = new Guid("0bc9828f-fdbe-4160-ad74-d9260678460c"),
                            isExpired = false
                        },
                        new
                        {
                            Id = new Guid("c0dd45ed-aa2a-4d3a-8b8a-6ffba34cc3e6"),
                            BookingExpireDate = new DateTime(2023, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightId = new Guid("25d1806a-d7e3-4deb-a449-41e9aa520314"),
                            Prise = 1401m,
                            UserId = new Guid("efc4584c-2f31-411a-93c8-eff6ec3bb14f"),
                            isExpired = false
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.FlightEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirlineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Arrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Departurer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("AirplaneId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("908db434-d6f4-43f2-ac9e-fc8bfcf04455"),
                            AirlineId = new Guid("2fbfb19d-a94a-41f4-ba03-4641a079f658"),
                            AirplaneId = new Guid("f4d8814e-bc80-4662-a5ba-c0fbdf717933"),
                            Arrival = "Boston",
                            ArrivingDate = new DateTime(2023, 2, 19, 18, 20, 0, 0, DateTimeKind.Unspecified),
                            DepartureDate = new DateTime(2023, 2, 17, 22, 15, 0, 0, DateTimeKind.Unspecified),
                            Departurer = "Minsk"
                        },
                        new
                        {
                            Id = new Guid("c29c4308-90eb-4467-a43e-f6177038591d"),
                            AirlineId = new Guid("2fbfb19d-a94a-41f4-ba03-4641a079f658"),
                            AirplaneId = new Guid("5f62643f-c965-4b42-be98-6a9d44a4f736"),
                            Arrival = "Paris",
                            ArrivingDate = new DateTime(2023, 5, 13, 18, 55, 0, 0, DateTimeKind.Unspecified),
                            DepartureDate = new DateTime(2023, 5, 13, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Departurer = "Pekin"
                        },
                        new
                        {
                            Id = new Guid("229b7943-0ff5-4a26-8664-ed32b8a6569f"),
                            AirlineId = new Guid("098acb74-29c7-46fc-8d62-839a51842205"),
                            AirplaneId = new Guid("6b5c2f29-8cad-4555-ae40-afa7f38730e7"),
                            Arrival = "Mykonos",
                            ArrivingDate = new DateTime(2023, 3, 23, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            DepartureDate = new DateTime(2023, 3, 20, 20, 55, 0, 0, DateTimeKind.Unspecified),
                            Departurer = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("25d1806a-d7e3-4deb-a449-41e9aa520314"),
                            AirlineId = new Guid("b169abc0-4a87-4152-9187-8dc97d01c68f"),
                            AirplaneId = new Guid("576fbfa1-c520-4080-80a8-6d6e4db8092a"),
                            Arrival = "yaunde",
                            ArrivingDate = new DateTime(2023, 7, 6, 3, 50, 0, 0, DateTimeKind.Unspecified),
                            DepartureDate = new DateTime(2023, 7, 3, 6, 50, 0, 0, DateTimeKind.Unspecified),
                            Departurer = "frankfurt"
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.PersonInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Citizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirePasportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonInformations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2168ac13-d46d-4261-93cd-c88ce375c4d8"),
                            BirthDate = new DateTime(1983, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citizenship = "Belarus",
                            ExpirePasportDate = new DateTime(2027, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "М",
                            IdentificationNumber = "2763984J836PB3",
                            Name = "Александр",
                            Surname = "Иванов",
                            UserId = new Guid("4106bf6d-2306-43a3-8614-e7818fd98f31")
                        },
                        new
                        {
                            Id = new Guid("259c9342-3fa8-476c-b3db-cb7a650d805a"),
                            BirthDate = new DateTime(1993, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citizenship = "America",
                            ExpirePasportDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "М",
                            IdentificationNumber = "2763984J836PB3",
                            Name = "Владислав",
                            Surname = "Лазарев",
                            UserId = new Guid("0bc9828f-fdbe-4160-ad74-d9260678460c")
                        },
                        new
                        {
                            Id = new Guid("3a0d00f9-188b-4b68-9f3f-daf543d30c92"),
                            BirthDate = new DateTime(1998, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Citizenship = "Poland",
                            ExpirePasportDate = new DateTime(2025, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Ж",
                            IdentificationNumber = "2763984J836PB3",
                            Name = "Мария",
                            Surname = "Лебедева",
                            UserId = new Guid("efc4584c-2f31-411a-93c8-eff6ec3bb14f")
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.UsersEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4106bf6d-2306-43a3-8614-e7818fd98f31")
                        },
                        new
                        {
                            Id = new Guid("0bc9828f-fdbe-4160-ad74-d9260678460c")
                        },
                        new
                        {
                            Id = new Guid("efc4584c-2f31-411a-93c8-eff6ec3bb14f")
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.BoardingPassEntity", b =>
                {
                    b.HasOne("FlightBooking.Domain.Entities.FlightEntity", "Flight")
                        .WithMany("BoardingPasses")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Entities.UsersEntity", "User")
                        .WithMany("BoardingPasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.FlightEntity", b =>
                {
                    b.HasOne("FlightBooking.Domain.Entities.AirlineEntity", "Airlines")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Entities.AirplaneEntity", "Airplane")
                        .WithMany("Flights")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airlines");

                    b.Navigation("Airplane");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.PersonInformationEntity", b =>
                {
                    b.HasOne("FlightBooking.Domain.Entities.UsersEntity", "User")
                        .WithOne("PersonInformation")
                        .HasForeignKey("FlightBooking.Domain.Entities.PersonInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.AirlineEntity", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.AirplaneEntity", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.FlightEntity", b =>
                {
                    b.Navigation("BoardingPasses");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.UsersEntity", b =>
                {
                    b.Navigation("BoardingPasses");

                    b.Navigation("PersonInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
